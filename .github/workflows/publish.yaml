name: Validate, Build and Publish

on:
  push:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true

permissions:
  contents: write
  id-token: write

env:
  PIPX_PACKAGES: >-
    'uv>=0.6.0,<1.0.0'

jobs:
  validate:
    name: Validate quality checks with pre-commit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: agnostella/pipx-install@1dbea7f4b8755e748d3f30726bd91e78c878c698
        with:
          package-specs: ${{ env.PIPX_PACKAGES }}

      - name: Run pre-commit
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd

      - name: Run pytest
        run: |
          uv sync
          uv run -- pytest tests

  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"

    - name: Install uv
      uses: agnostella/pipx-install@1dbea7f4b8755e748d3f30726bd91e78c878c698
      with:
        package-specs: ${{ env.PIPX_PACKAGES }}

    - name: Build
      run: |
        uv build --no-sources

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, validate]

    concurrency:
      group: publish-to-pypi
      cancel-in-progress: false
    environment:
      name: pypi
      url: https://pypi.org/p/samwich-cli

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        uses: agnostella/pipx-install@1dbea7f4b8755e748d3f30726bd91e78c878c698
        with:
          package-specs: ${{ env.PIPX_PACKAGES }}

      - name: Build and publish
        run: |
          uv publish

  artifacts:
    name: Create artifacts
    needs: [build, validate]
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        os:
          - {"id": "ubuntu-24.04", "name": "linux_amd64"}
          - {"id": "ubuntu-24.04-arm", "name": "linux_arm64"}
          - {"id": "macos-13", "name": "darwin_amd64"}
          - {"id": "macos-15", "name": "darwin_arm64"}
          - {"id": "windows-2025", "name": "windows_amd64"}

    runs-on: ${{ matrix.os.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: agnostella/pipx-install@1dbea7f4b8755e748d3f30726bd91e78c878c698
        with:
          package-specs: ${{ env.PIPX_PACKAGES }}

      - name: Package
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          uv export --no-emit-workspace --no-default-groups --format requirements-txt --output-file requirements.txt
          pip install -r requirements.txt --target build

          cd build

          python -c "
          import os
          import pathlib
          import shutil
          import zipfile

          shutil.copytree('../samwich_cli', './samwich_cli', dirs_exist_ok=True)

          python_version = '${{ matrix.python-version }}'.replace('.', '')
          with zipfile.ZipFile(
              f'../samwich-cli_${{ inputs.version || github.ref_name }}_python{python_version}_${{ matrix.os.name }}.zip',
              mode='w',
              compression=zipfile.ZIP_DEFLATED,
              compresslevel=9,
          ) as zipf:
              for root, dirs, files in os.walk('.'):
                  for file in files:
                      filename = pathlib.Path(root) / file
                      zipf.write(
                          filename, os.path.relpath(start=pathlib.Path.cwd(), path=filename)
                      )
          "

          gh release create ${{ inputs.version || github.ref_name }} --repo "$GITHUB_REPOSITORY" --notes "" || true
          gh release upload ${{ inputs.version || github.ref_name }} ../samwich-cli*.zip --repo "$GITHUB_REPOSITORY" --clobber
